import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertAssessmentSchema, insertGameScoreSchema, insertLearningPathSchema } from "@shared/schema";
import { getChatResponse, generateMiniQuiz, buildOntologyContext, analyzeMathDrawing } from "./openai";
import adaptiveRoutes from "./adaptive-routes";
import optimizedAdaptiveRoutes from "./optimized-adaptive-routes";
import performanceRoutes from "./performance-routes";

export async function registerRoutes(app: Express): Promise<Server> {
  // Adaptive Learning routes (original)
  app.use("/api/adaptive", adaptiveRoutes);
  
  // Optimized Adaptive Learning routes
  app.use("/api/adaptive-optimized", optimizedAdaptiveRoutes);
  
  // Performance monitoring routes
  app.use("/api/performance", performanceRoutes);

  // Authentication routes
  app.post("/api/auth/register", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      const existingUser = await storage.getUserByUsername(userData.username);
      
      if (existingUser) {
        return res.status(400).json({ message: "Username already exists" });
      }

      const user = await storage.createUser(userData);
      res.json({ user: { ...user, password: undefined } });
    } catch (error) {
      res.status(400).json({ message: "Invalid user data" });
    }
  });

  app.post("/api/auth/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      const user = await storage.getUserByUsername(username);
      
      if (!user || user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      res.json({ user: { ...user, password: undefined } });
    } catch (error) {
      res.status(500).json({ message: "Login failed" });
    }
  });

  // User routes
  app.get("/api/users/:id", async (req, res) => {
    try {
      const user = await storage.getUser(req.params.id);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      res.json({ ...user, password: undefined });
    } catch (error) {
      res.status(500).json({ message: "Failed to get user" });
    }
  });

  app.patch("/api/users/:id", async (req, res) => {
    try {
      const updates = req.body;
      const user = await storage.updateUser(req.params.id, updates);
      res.json({ ...user, password: undefined });
    } catch (error) {
      res.status(500).json({ message: "Failed to update user" });
    }
  });

  // Assessment routes
  app.post("/api/assessments", async (req, res) => {
    try {
      const assessmentData = insertAssessmentSchema.parse(req.body);
      const assessment = await storage.createAssessment(assessmentData);
      res.json(assessment);
    } catch (error) {
      res.status(400).json({ message: "Invalid assessment data" });
    }
  });

  app.get("/api/assessments/user/:userId", async (req, res) => {
    try {
      const assessments = await storage.getAssessmentsByUser(req.params.userId);
      res.json(assessments);
    } catch (error) {
      res.status(500).json({ message: "Failed to get assessments" });
    }
  });

  // Learning path routes
  app.post("/api/learning-paths", async (req, res) => {
    try {
      const learningPathData = insertLearningPathSchema.parse(req.body);
      const path = await storage.createLearningPath(learningPathData);
      res.json(path);
    } catch (error) {
      res.status(400).json({ message: "Invalid learning path data" });
    }
  });

  app.get("/api/learning-paths/user/:userId", async (req, res) => {
    try {
      const paths = await storage.getLearningPathsByUser(req.params.userId);
      res.json(paths);
    } catch (error) {
      res.status(500).json({ message: "Failed to get learning paths" });
    }
  });

  // Question routes
  app.get("/api/questions/:subject", async (req, res) => {
    try {
      const { subject } = req.params;
      const { topic, count, difficulty } = req.query;
      
      if (count) {
        const questions = await storage.getRandomQuestions(
          subject, 
          parseInt(count as string), 
          difficulty ? parseInt(difficulty as string) : undefined
        );
        res.json(questions);
      } else {
        const questions = await storage.getQuestionsBySubjectAndTopic(subject, topic as string);
        res.json(questions);
      }
    } catch (error) {
      res.status(500).json({ message: "Failed to get questions" });
    }
  });

  // Game score routes
  app.post("/api/game-scores", async (req, res) => {
    try {
      const scoreData = insertGameScoreSchema.parse(req.body);
      const score = await storage.createGameScore(scoreData);
      res.json(score);
    } catch (error) {
      res.status(400).json({ message: "Invalid score data" });
    }
  });

  app.get("/api/leaderboard", async (req, res) => {
    try {
      const { limit } = req.query;
      const scores = await storage.getTopGameScores(limit ? parseInt(limit as string) : 10);
      res.json(scores);
    } catch (error) {
      res.status(500).json({ message: "Failed to get leaderboard" });
    }
  });

  // AI Chat routes
  app.post("/api/chat", async (req, res) => {
    try {
      const { message, context, errorPatterns, shapeData, imageData } = req.body;
      if (!message) {
        return res.status(400).json({ message: "Message is required" });
      }

      // Handle suggested questions with detailed responses
      const suggestedQuestionResponses: { [key: string]: string } = {
        "L√†m th·∫ø n√†o ƒë·ªÉ x√°c ƒë·ªãnh h·ªá s·ªë g√≥c t·ª´ ƒë·ªì th·ªã?": `üìà **C√°ch x√°c ƒë·ªãnh h·ªá s·ªë g√≥c t·ª´ ƒë·ªì th·ªã**

üéØ **Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng hai ƒëi·ªÉm**
1. Ch·ªçn 2 ƒëi·ªÉm b·∫•t k·ª≥ tr√™n ƒë∆∞·ªùng th·∫≥ng: (x‚ÇÅ, y‚ÇÅ) v√† (x‚ÇÇ, y‚ÇÇ)
2. √Åp d·ª•ng c√¥ng th·ª©c: a = (y‚ÇÇ - y‚ÇÅ) / (x‚ÇÇ - x‚ÇÅ)

üìä **Ph∆∞∆°ng ph√°p 2: Quan s√°t ƒë·ªô d·ªëc**
- N·∫øu ƒë∆∞·ªùng th·∫≥ng ƒëi l√™n t·ª´ tr√°i sang ph·∫£i ‚Üí a > 0
- N·∫øu ƒë∆∞·ªùng th·∫≥ng ƒëi xu·ªëng t·ª´ tr√°i sang ph·∫£i ‚Üí a < 0
- ƒê∆∞·ªùng th·∫≥ng c√†ng d·ªëc ‚Üí |a| c√†ng l·ªõn

üí° **V√≠ d·ª• th·ª±c t·∫ø:**
T·ª´ ƒëi·ªÉm (0, 2) ƒë·∫øn (2, 6):
a = (6 - 2) / (2 - 0) = 4/2 = 2

üîç **M·∫πo nh·ªõ:**
H·ªá s·ªë g√≥c = ƒê·ªô thay ƒë·ªïi c·ªßa y / ƒê·ªô thay ƒë·ªïi c·ªßa x`,

        "T·∫°i sao ƒë·ªì th·ªã h√†m s·ªë b·∫≠c nh·∫•t lu√¥n l√† ƒë∆∞·ªùng th·∫≥ng?": `üìê **T·∫°i sao ƒë·ªì th·ªã h√†m s·ªë b·∫≠c nh·∫•t l√† ƒë∆∞·ªùng th·∫≥ng?**

üéØ **L√Ω do to√°n h·ªçc:**
H√†m s·ªë b·∫≠c nh·∫•t c√≥ d·∫°ng y = ax + b
- ƒê√¢y l√† ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh
- T·ª∑ l·ªá thay ƒë·ªïi gi·ªØa x v√† y lu√¥n kh√¥ng ƒë·ªïi (= a)

üìä **Gi·∫£i th√≠ch tr·ª±c quan:**
- Khi x tƒÉng 1 ƒë∆°n v·ªã ‚Üí y tƒÉng a ƒë∆°n v·ªã
- S·ª± thay ƒë·ªïi ƒë·ªÅu ƒë·∫∑n n√†y t·∫°o ra ƒë∆∞·ªùng th·∫≥ng
- Kh√¥ng c√≥ s·ª± cong v√™nh hay b·∫ª kh√∫c

üí° **So s√°nh v·ªõi h√†m kh√°c:**
- H√†m b·∫≠c 2: y = ax¬≤ + bx + c ‚Üí Parabol (cong)
- H√†m b·∫≠c 1: y = ax + b ‚Üí ƒê∆∞·ªùng th·∫≥ng
- H√†m s·ªë cƒÉn: y = ‚àöx ‚Üí ƒê∆∞·ªùng cong

ü§î **Th√≠ nghi·ªám t∆∞ duy:**
Th·ª≠ v·∫Ω c√°c ƒëi·ªÉm (0,b), (1,a+b), (2,2a+b)...
B·∫°n s·∫Ω th·∫•y ch√∫ng th·∫≥ng h√†ng!`,

        "C√°ch t√¨m giao ƒëi·ªÉm c·ªßa hai ƒë∆∞·ªùng th·∫≥ng?": `‚ö° **T√¨m giao ƒëi·ªÉm c·ªßa hai ƒë∆∞·ªùng th·∫≥ng**

üéØ **Ph∆∞∆°ng ph√°p gi·∫£i:**
Cho: y = a‚ÇÅx + b‚ÇÅ v√† y = a‚ÇÇx + b‚ÇÇ
T·∫°i giao ƒëi·ªÉm: y‚ÇÅ = y‚ÇÇ

üìù **C√°c b∆∞·ªõc th·ª±c hi·ªán:**
1. **L·∫≠p ph∆∞∆°ng tr√¨nh:** a‚ÇÅx + b‚ÇÅ = a‚ÇÇx + b‚ÇÇ
2. **Gi·∫£i t√¨m x:** (a‚ÇÅ - a‚ÇÇ)x = b‚ÇÇ - b‚ÇÅ ‚Üí x = (b‚ÇÇ - b‚ÇÅ)/(a‚ÇÅ - a‚ÇÇ)
3. **T√¨m y:** Thay x v√†o m·ªôt trong hai ph∆∞∆°ng tr√¨nh

üí° **V√≠ d·ª• chi ti·∫øt:**
y = 2x + 1 v√† y = -x + 4
‚Üí 2x + 1 = -x + 4
‚Üí 3x = 3
‚Üí x = 1
‚Üí y = 2(1) + 1 = 3
‚Üí Giao ƒëi·ªÉm: (1, 3)

‚ö†Ô∏è **Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát:**
- N·∫øu a‚ÇÅ = a‚ÇÇ v√† b‚ÇÅ ‚â† b‚ÇÇ ‚Üí Song song (kh√¥ng c√≥ giao ƒëi·ªÉm)
- N·∫øu a‚ÇÅ = a‚ÇÇ v√† b‚ÇÅ = b‚ÇÇ ‚Üí Tr√πng nhau (v√¥ s·ªë giao ƒëi·ªÉm)`,

        "√ù nghƒ©a c·ªßa tung ƒë·ªô g·ªëc trong th·ª±c t·∫ø?": `üåü **√ù nghƒ©a th·ª±c t·∫ø c·ªßa tung ƒë·ªô g·ªëc (b)**

üéØ **ƒê·ªãnh nghƒ©a:**
Tung ƒë·ªô g·ªëc l√† gi√° tr·ªã y khi x = 0
Trong y = ax + b, tung ƒë·ªô g·ªëc l√† b

üè† **V√≠ d·ª• th·ª±c t·∫ø:**

**1. Chi ph√≠ ƒëi·ªán tho·∫°i:**
y = 50x + 200 (ng√†n ƒë·ªìng)
- x: s·ªë ph√∫t g·ªçi
- 200: ph√≠ c·ªë ƒë·ªãnh h√†ng th√°ng (tung ƒë·ªô g·ªëc)
- 50: gi√° m·ªói ph√∫t g·ªçi

**2. Nhi·ªát ƒë·ªô v√† ƒë·ªô cao:**
y = -6x + 20 (¬∞C)
- x: ƒë·ªô cao (km)
- 20: nhi·ªát ƒë·ªô t·∫°i m·ª±c n∆∞·ªõc bi·ªÉn (tung ƒë·ªô g·ªëc)
- -6: nhi·ªát ƒë·ªô gi·∫£m 6¬∞C m·ªói km

**3. Ti·∫øt ki·ªám ti·ªÅn:**
y = 100x + 500 (ng√†n ƒë·ªìng)
- x: s·ªë th√°ng
- 500: s·ªë ti·ªÅn ban ƒë·∫ßu (tung ƒë·ªô g·ªëc)
- 100: s·ªë ti·ªÅn ti·∫øt ki·ªám m·ªói th√°ng

üí° **T√≥m l·∫°i:**
Tung ƒë·ªô g·ªëc = Gi√° tr·ªã kh·ªüi ƒëi·ªÉm, ƒëi·ªÅu ki·ªán ban ƒë·∫ßu`,

        "Khi n√†o hai ƒë∆∞·ªùng th·∫≥ng song song v·ªõi nhau?": `üìè **ƒêi·ªÅu ki·ªán ƒë·ªÉ hai ƒë∆∞·ªùng th·∫≥ng song song**

üéØ **ƒêi·ªÅu ki·ªán ch√≠nh:**
Hai ƒë∆∞·ªùng th·∫≥ng y = a‚ÇÅx + b‚ÇÅ v√† y = a‚ÇÇx + b‚ÇÇ song song khi:
- **a‚ÇÅ = a‚ÇÇ** (c√πng h·ªá s·ªë g√≥c)
- **b‚ÇÅ ‚â† b‚ÇÇ** (kh√°c tung ƒë·ªô g·ªëc)

üìä **Gi·∫£i th√≠ch tr·ª±c quan:**
- C√πng h·ªá s·ªë g√≥c ‚Üí c√πng ƒë·ªô d·ªëc
- Kh√°c tung ƒë·ªô g·ªëc ‚Üí kh√°c v·ªã tr√≠ xu·∫•t ph√°t
- K·∫øt qu·∫£: hai ƒë∆∞·ªùng th·∫≥ng kh√¥ng bao gi·ªù c·∫Øt nhau

üí° **V√≠ d·ª• c·ª• th·ªÉ:**
- y = 2x + 3 v√† y = 2x + 5 ‚Üí Song song
- y = -x + 1 v√† y = -x - 2 ‚Üí Song song
- y = 3x + 4 v√† y = 3x + 4 ‚Üí Tr√πng nhau (kh√¥ng ph·∫£i song song)

üîç **·ª®ng d·ª•ng th·ª±c t·∫ø:**
- ƒê∆∞·ªùng ray xe l·ª≠a
- L√†n ƒë∆∞·ªùng cao t·ªëc
- C√°c t·∫ßng trong t√≤a nh√†

‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**
N·∫øu a‚ÇÅ = a‚ÇÇ V√Ä b‚ÇÅ = b‚ÇÇ ‚Üí hai ƒë∆∞·ªùng th·∫≥ng tr√πng nhau (kh√¥ng song song)`
      };

      // Check if message matches any suggested question
      for (const [question, response] of Object.entries(suggestedQuestionResponses)) {
        if (message.includes(question)) {
          return res.json({ response });
        }
      }

      // Check for learning intent keywords
      const learningKeywords = ['mu·ªën h·ªçc', 'mu·ªën ƒë∆∞·ª£c h·ªçc', 'h·ªçc m√¥n', 'h·ªçc', 't√¥i mu·ªën h·ªçc', 'em mu·ªën h·ªçc', 'h√¥m nay t√¥i mu·ªën', 'h√¥m nay em mu·ªën'];
      const messageLower = message.toLowerCase();
      const hasLearningIntent = learningKeywords.some(keyword => messageLower.includes(keyword));

      if (hasLearningIntent) {
        return res.json({ 
          response: "T√¥i r·∫•t s·∫µn l√≤ng ƒë∆∞·ª£c gi√∫p b·∫°n! H√£y b·∫•m v√†o t√≠nh nƒÉng ƒë·ªÉ t√¥i ƒë∆∞·ª£c hi·ªÉu b·∫°n v√† t·∫°o l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p nh·∫•t nh√©! üéØ‚ú®",
          cta: {
            text: "B·∫Øt ƒë·∫ßu c√° nh√¢n ho√°",
            href: "/onboarding"
          }
        });
      }

      // Handle visual questions with shape data or image data
      if (shapeData || imageData) {
        // Mock responses for different math topics based on lesson content
        const mockMathResponses = [
          {
            content: `üìê **H√†m s·ªë b·∫≠c nh·∫•t** - Ph·∫ßn b·∫°n ƒë√£ ch·ªçn

üéØ **Kh√°i ni·ªám ch√≠nh:**
H√†m s·ªë b·∫≠c nh·∫•t c√≥ d·∫°ng y = ax + b (a ‚â† 0)
- a: h·ªá s·ªë g√≥c (ƒë·ªô d·ªëc c·ªßa ƒë∆∞·ªùng th·∫≥ng)
- b: tung ƒë·ªô g·ªëc (ƒëi·ªÉm c·∫Øt tr·ª•c y)

üìä **ƒê·∫∑c ƒëi·ªÉm ƒë·ªì th·ªã:**
- ƒê·ªì th·ªã l√† ƒë∆∞·ªùng th·∫≥ng
- N·∫øu a > 0: h√†m s·ªë ƒë·ªìng bi·∫øn
- N·∫øu a < 0: h√†m s·ªë ngh·ªãch bi·∫øn

üí° **V√≠ d·ª• th·ª±c t·∫ø:**
y = 2x + 3 c√≥ nghƒ©a l√†:
- M·ªói khi x tƒÉng 1, y tƒÉng 2
- Khi x = 0, y = 3

ü§î **C√¢u h·ªèi ki·ªÉm tra hi·ªÉu:**
V·ªõi h√†m s·ªë y = -x + 5, h√£y t√¨m gi√° tr·ªã y khi x = 2?`
          },
          {
            content: `üìà **C√°ch v·∫Ω ƒë·ªì th·ªã h√†m s·ªë b·∫≠c nh·∫•t**

üéØ **B∆∞·ªõc 1: T√¨m 2 ƒëi·ªÉm**
- Cho x = 0 ‚Üí t√¨m y
- Cho y = 0 ‚Üí t√¨m x

üìù **B∆∞·ªõc 2: V·∫Ω ƒë∆∞·ªùng th·∫≥ng**
- N·ªëi 2 ƒëi·ªÉm v·ª´a t√¨m ƒë∆∞·ª£c
- K√©o d√†i th√†nh ƒë∆∞·ªùng th·∫≥ng

üí° **M·∫πo nh·ªõ:**
- H·ªá s·ªë a d∆∞∆°ng: ƒë∆∞·ªùng th·∫≥ng ƒëi l√™n t·ª´ tr√°i sang ph·∫£i
- H·ªá s·ªë a √¢m: ƒë∆∞·ªùng th·∫≥ng ƒëi xu·ªëng t·ª´ tr√°i sang ph·∫£i

üîç **L∆∞u √Ω quan tr·ªçng:**
ƒê·ªì th·ªã h√†m s·ªë b·∫≠c nh·∫•t lu√¥n l√† ƒë∆∞·ªùng th·∫≥ng kh√¥ng qua g·ªëc t·ªça ƒë·ªô (tr·ª´ khi b = 0)`
          },
          {
            content: `‚ö° **T√¨m giao ƒëi·ªÉm c·ªßa hai ƒë∆∞·ªùng th·∫≥ng**

üéØ **Ph∆∞∆°ng ph√°p:**
Cho y‚ÇÅ = a‚ÇÅx + b‚ÇÅ v√† y‚ÇÇ = a‚ÇÇx + b‚ÇÇ
T·∫°i giao ƒëi·ªÉm: y‚ÇÅ = y‚ÇÇ

üìù **C√°c b∆∞·ªõc gi·∫£i:**
1. L·∫≠p ph∆∞∆°ng tr√¨nh: a‚ÇÅx + b‚ÇÅ = a‚ÇÇx + b‚ÇÇ
2. Gi·∫£i ph∆∞∆°ng tr√¨nh t√¨m x
3. Thay x v√†o m·ªôt trong hai h√†m ƒë·ªÉ t√¨m y

üí° **V√≠ d·ª• c·ª• th·ªÉ:**
y = 2x + 1 v√† y = -x + 4
‚Üí 2x + 1 = -x + 4
‚Üí 3x = 3
‚Üí x = 1, y = 3
‚Üí Giao ƒëi·ªÉm: (1; 3)

ü§ì **Ki·∫øn th·ª©c m·ªü r·ªông:**
Hai ƒë∆∞·ªùng th·∫≥ng song song khi a‚ÇÅ = a‚ÇÇ nh∆∞ng b‚ÇÅ ‚â† b‚ÇÇ`
          }
        ];
        
        // Select random response or based on position
        const responseIndex = Math.floor(Math.random() * mockMathResponses.length);
        const selectedResponse = mockMathResponses[responseIndex];
        
        return res.json({ response: selectedResponse.content });
      }

      const augmented = [context, buildOntologyContext(context)].filter(Boolean).join("\n\n");
      const response = await getChatResponse(message, augmented, errorPatterns);
      res.json({ response });
    } catch (error) {
      console.error("Chat error:", error);
      res.status(500).json({ message: "Failed to get AI response" });
    }
  });

  // Generate mini quiz for reinforcement learning
  app.post("/api/mini-quiz", async (req, res) => {
    try {
      const { topic, difficulty } = req.body;
      if (!topic || !difficulty) {
        return res.status(400).json({ message: "Topic and difficulty are required" });
      }
      
      const questions = await generateMiniQuiz(topic, difficulty);
      res.json({ questions });
    } catch (error) {
      console.error("Mini quiz generation error:", error);
      res.status(500).json({ message: "Failed to generate mini quiz" });
    }
  });

  // Demo: reset user progress/state
  app.post("/api/demo/reset", async (req, res) => {
    try {
      const { userId } = req.body || {};
      if (!userId) return res.status(400).json({ message: "userId is required" });
      await storage.resetUserData(userId);
      res.json({ ok: true });
    } catch (error) {
      res.status(500).json({ message: "Failed to reset demo data" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
