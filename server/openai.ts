import OpenAI from "openai";
import { getFrameById, findMisconceptionFrameByError } from "./ontology";
import { tutorKnowledgeBase, selectTutorResponse } from "./ai-knowledge-base";

// Initialize OpenAI client only if the API key is present, so the app can run without AI features
const apiKey = process.env.OPENAI_API_KEY;
const openaiEnabled = Boolean(apiKey);
const openai = openaiEnabled ? new OpenAI({ apiKey }) : null;

export async function getChatResponse(
  message: string, 
  context?: string, 
  errorPatterns?: { misconceptionId: string; question: string; chosen: string; correct: string; }[]
): Promise<string> {
  try {
    if (!openaiEnabled || !openai) {
      // Use knowledge base for offline responses
      const misconceptionId = errorPatterns?.[0]?.misconceptionId;
      return selectTutorResponse(message, misconceptionId, 'confused', 'intermediate');
    }

    // Enhanced context building with knowledge base
    let enhancedContext = context || '';
    let knowledgeContext = '';
    
    if (errorPatterns && errorPatterns.length > 0) {
      const recentError = errorPatterns[0];
      const topic = extractTopicFromMisconception(recentError.misconceptionId);
      
      if (topic && tutorKnowledgeBase.topicFrames[topic]) {
        const frame = tutorKnowledgeBase.topicFrames[topic];
        knowledgeContext = `
KHUNG KI·∫æN TH·ª®C CH·ª¶ ƒê·ªÄ: ${topic}
Nguy√™n l√Ω c·ªët l√µi: ${frame.keyPrinciples.join('; ')}
L·ªói th∆∞·ªùng g·∫∑p: ${frame.commonErrors.join('; ')}
B∆∞·ªõc h∆∞·ªõng d·∫´n: ${frame.scaffoldingSteps?.join('; ') || 'Theo t·ª´ng b∆∞·ªõc c∆° b·∫£n'}

CHI TI·∫æT L·ªñI:
C√¢u h·ªèi: "${recentError.question}"
H·ªçc sinh ch·ªçn: "${recentError.chosen}"
ƒê√°p √°n ƒë√∫ng: "${recentError.correct}"
        `;
      }
      
      // Add misconception-specific intervention
      if (tutorKnowledgeBase.misconceptionInterventions[recentError.misconceptionId]) {
        const intervention = tutorKnowledgeBase.misconceptionInterventions[recentError.misconceptionId];
        knowledgeContext += `
PH∆Ø∆†NG PH√ÅP KH·∫ÆC PH·ª§C:
Gi·∫£i th√≠ch: ${intervention.explanation}
V√≠ d·ª• t∆∞∆°ng t·ª±: ${intervention.analogy}
C√°ch l√†m ƒë√∫ng: ${intervention.correctMethod}
        `;
      }
    }

    const systemPrompt = `B·∫°n l√† Stella - m·ªôt tr·ª£ l√Ω AI Socratic th√¥ng minh v√† th√¢n thi·ªán, chuy√™n v·ªÅ to√°n h·ªçc cho h·ªçc sinh Vi·ªát Nam l·ªõp 9.

NGUY√äN T·∫ÆC C·ªêT L√ïI:
- S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p Socratic: ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ d·∫´n d·∫Øt h·ªçc sinh t·ª± kh√°m ph√°
- KH√îNG bao gi·ªù ƒë∆∞a ra ƒë√°p √°n tr·ª±c ti·∫øp
- Khuy·∫øn kh√≠ch h·ªçc sinh gi·∫£i th√≠ch suy nghƒ© c·ªßa m√¨nh
- Th·ªÉ hi·ªán s·ª± ki√™n nh·∫´n v√† ƒë·ªông vi√™n
- S·ª≠ d·ª•ng v√≠ d·ª• c·ª• th·ªÉ v√† h√¨nh ·∫£nh tr·ª±c quan
- K·∫øt n·ªëi v·ªõi th·ª±c t·∫ø ƒë·ªÉ t·∫°o √Ω nghƒ©a

PHONG C√ÅCH GIAO TI·∫æP:
- Th√¢n thi·ªán, g·∫ßn g≈©i nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¥ng minh
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o kh√¥ng kh√≠ t√≠ch c·ª±c  
- ƒê·∫∑t c√¢u h·ªèi m·ªü ƒë·ªÉ kh√≠ch l·ªá suy nghƒ©
- Th·ªÉ hi·ªán s·ª± h√†o h·ª©ng khi h·ªçc sinh ti·∫øn b·ªô

${enhancedContext ? `\nB·ªëi c·∫£nh b√†i to√°n: ${enhancedContext}` : ''}
${knowledgeContext}

H√£y ph·∫£n h·ªìi theo phong c√°ch Socratic, gi√∫p h·ªçc sinh t·ª± kh√°m ph√° ra l·ªói sai v√† c√°ch s·ª≠a ch·ªØa.`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user", 
          content: message
        }
      ],
      max_tokens: 600,
      temperature: 0.8,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    });

    return response.choices[0].message.content || "Hmm, c√≥ v·∫ª nh∆∞ t√¥i c·∫ßn suy nghƒ© th√™m v·ªÅ c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ c√°ch b·∫°n ti·∫øp c·∫≠n b√†i to√°n n√†y kh√¥ng? ü§î";
  } catch (error) {
    console.error("OpenAI API error:", error);
    return "Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t kh√≥ khƒÉn k·ªπ thu·∫≠t. Nh∆∞ng ƒë·ª´ng lo! H√£y th·ª≠ chia nh·ªè b√†i to√°n th√†nh c√°c b∆∞·ªõc ƒë∆°n gi·∫£n h∆°n v√† l√†m t·ª´ng b∆∞·ªõc m·ªôt nh√©! üí™";
  }
}

// Helper function to extract topic from misconception ID
function extractTopicFromMisconception(misconceptionId: string): string | null {
  const topicMap: { [key: string]: string } = {
    'M-FRAC': 'fractions',
    'M-GEO': 'geometry', 
    'M-LINEAR': 'linear-equation',
    'M-QUAD': 'quadratic-equation',
    'M-ARITH': 'basic-arithmetic'
  };
  
  for (const [prefix, topic] of Object.entries(topicMap)) {
    if (misconceptionId.startsWith(prefix)) {
      return topic;
    }
  }
  return null;
}

export async function generateMiniQuiz(topic: string, difficulty: number): Promise<{
  question: string;
  options: string[];
  correctAnswer: string;
  explanation: string;
}[]> {
  try {
    if (!openaiEnabled || !openai) {
      // Provide a simple fallback so the app remains usable without an API key
      return [
        {
          question: `C√¢u h·ªèi m·∫´u v·ªÅ ch·ªß ƒë·ªÅ "${topic}": Gi√° tr·ªã c·ªßa 2x khi x = ${difficulty + 1} l√† bao nhi√™u?`,
          options: ["2", "4", `${2 * (difficulty + 1)}`, "8"],
          correctAnswer: `${2 * (difficulty + 1)}`,
          explanation: `Thay x = ${difficulty + 1} v√†o bi·ªÉu th·ª©c 2x, ta ƒë∆∞·ª£c 2 * ${difficulty + 1} = ${2 * (difficulty + 1)}.`
        },
        {
          question: `C√¢u h·ªèi m·∫´u: N·∫øu a + b = ${difficulty + 5} v√† a = 2, th√¨ b b·∫±ng bao nhi√™u?`,
          options: ["1", `${difficulty + 3}`, "5", "7"],
          correctAnswer: `${difficulty + 3}`,
          explanation: `b = ${difficulty + 5} - 2 = ${difficulty + 3}.`
        },
        {
          question: `C√¢u h·ªèi m·∫´u: Di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t c√≥ chi·ªÅu d√†i ${difficulty + 3} v√† chi·ªÅu r·ªông 2 l√† bao nhi√™u?`,
          options: ["2", `${2 * (difficulty + 3)}`, "6", "8"],
          correctAnswer: `${2 * (difficulty + 3)}`,
          explanation: `S = d√†i * r·ªông = ${difficulty + 3} * 2 = ${2 * (difficulty + 3)}.`
        }
      ];
    }
    const prompt = `T·∫°o 3 c√¢u h·ªèi tr·∫Øc nghi·ªám to√°n h·ªçc v·ªÅ ch·ªß ƒë·ªÅ "${topic}" v·ªõi ƒë·ªô kh√≥ ${difficulty}/5 cho h·ªçc sinh l·ªõp 9. 
    Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON v·ªõi format:
    {
      "questions": [
        {
          "question": "c√¢u h·ªèi",
          "options": ["A", "B", "C", "D"],
          "correctAnswer": "ƒë√°p √°n ƒë√∫ng",
          "explanation": "gi·∫£i th√≠ch chi ti·∫øt"
        }
      ]
    }`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "B·∫°n l√† chuy√™n gia t·∫°o c√¢u h·ªèi to√°n h·ªçc. H√£y tr·∫£ l·ªùi b·∫±ng JSON h·ª£p l·ªá."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      response_format: { type: "json_object" }
    });

    const result = JSON.parse(response.choices[0].message.content || '{"questions": []}');
    return result.questions || [];
  } catch (error) {
    console.error("Error generating mini quiz:", error);
    return [];
  }
}

// Build RAG-like context from ontology using a simple errorPattern or concept id found in the context string
export function buildOntologyContext(rawContext?: string): string | undefined {
  if (!rawContext) return undefined;
  try {
    // naive extraction: look for errorPattern tokens used in our demo maps
    const patterns = [
      'perimeter_instead_of_area',
      'add_sides_instead_of_multiply',
      'double_area_error',
      'sign_error_transposition',
    ];
    const found = patterns.find(p => rawContext.includes(p));
    if (found) {
      const frame = findMisconceptionFrameByError(found);
      if (frame) {
        const hints = frame.commonMisconceptions.find(m => m.errorPattern === found)?.scaffoldingHints || [];
        return `Khung ki·∫øn th·ª©c: ${frame.conceptName}\nƒê·ªãnh nghƒ©a: ${frame.definition}\nG·ª£i √Ω: ${hints.join(' | ')}`;
      }
    }
    // fallback: find by simple frame id
    const idMatch = rawContext.match(/FRAME:([A-Z0-9\-]+)/);
    if (idMatch) {
      const fr = getFrameById(idMatch[1]);
      if (fr) return `Khung ki·∫øn th·ª©c: ${fr.conceptName}\nƒê·ªãnh nghƒ©a: ${fr.definition}`;
    }
  } catch {}
  return undefined;
}